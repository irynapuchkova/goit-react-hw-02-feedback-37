{"version":3,"sources":["components/Section/Section.styled.js","components/Section/Section.jsx","components/Statistics/Statistics.styled.js","components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.styled.js","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","components/App/App.jsx","index.js"],"names":["SectionSet","styled","section","Head","h1","Section","title","children","FeedbackPointsSet","div","TotalPoints","FeedbackPoints","p","PositivePotion","Statistics","good","neutral","bad","total","positivePercentage","ButtonSet","Button","button","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","NotificationText","Notification","message","App","state","onButtonClick","e","reaction","currentTarget","innerText","toLowerCase","Object","keys","filter","key","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Number","parseInt","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAEaA,EAAaC,IAAOC,QAAV,6GAOVC,EAAOF,IAAOG,GAAV,6K,OCNF,SAASC,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,eAACP,EAAD,WACGM,GAAS,cAACH,EAAD,UAAOG,IAChBC,KCLA,I,IAAMC,EAAoBP,IAAOQ,IAAV,8CAIjBC,EAAcT,IAAOQ,IAAV,0LAYXE,EAAiBV,IAAOW,EAAV,0LAYdC,EAAiBZ,IAAOW,EAAV,0LCtBZ,SAASE,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,eAACX,EAAD,WACE,eAACG,EAAD,qBACS,+BAAOI,OAEhB,eAACJ,EAAD,wBACY,+BAAOK,OAEnB,eAACL,EAAD,oBACQ,+BAAOM,OAEf,eAACP,EAAD,sBACU,+BAAOQ,OAEjB,eAACL,EAAD,iCAEE,iCAAOM,GAAsBA,EAA7B,cC7BD,I,EAAMC,EAAYnB,IAAOQ,IAAV,6FAMTY,EAASpB,IAAOqB,OAAV,qdCLJ,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OACE,cAACL,EAAD,UACGI,EAAQE,KAAI,SAAAC,GAAM,OACjB,cAACN,EAAD,CAAqBO,KAAK,SAASC,QAASJ,EAA5C,SACGE,GADUA,QCLd,IAAMG,EAAmB7B,IAAOW,EAAV,kICCd,SAASmB,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,cAACF,EAAD,CAAkBF,KAAK,OAAvB,SAA+BI,I,ICInBC,E,4MACnBC,MAAQ,CACNnB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPkB,cAAgB,SAAAC,GACd,IAAIC,EAAWD,EAAEE,cAAcC,UAAUC,cAC5BC,OAAOC,KAAK,EAAKR,OAErBS,QAAO,SAAAC,GAAG,OAAIA,IAAQP,MAC7B,EAAKQ,UAAS,SAAAC,GAAS,sBAAQT,EAAWS,EAAUT,GAAY,O,EAIpEU,mBAAqB,WACnB,MAA+B,EAAKb,MACpC,OADA,EAAQnB,KAAR,EAAcC,QAAd,EAAuBC,K,EAIzB+B,gCAAkC,SAAA9B,GAChC,IAAQH,EAAS,EAAKmB,MAAdnB,KACR,OAAOkC,OAAOC,SAAiB,IAAPnC,EAAcG,I,4CAGxC,WACE,MAA+BiC,KAAKjB,MAA5BnB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEjBC,EAAQiC,KAAKJ,qBACb5B,EAAqBgC,KAAKH,gCAAgC9B,GAEhE,OACE,qCACE,cAACb,EAAD,CAASC,MAAM,2BAAf,SACE,cAACiB,EAAD,CACEC,QARQ,CAAC,OAAQ,UAAW,OAS5BC,gBAAiB0B,KAAKhB,kBAI1B,eAAC9B,EAAD,CAASC,MAAM,aAAf,UACa,IAAVY,GAAe,cAACa,EAAD,CAAcC,QAAQ,4BACrCd,EAAQ,GACP,cAACJ,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,c,GAjDDiC,aCDjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.722a1eea.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const SectionSet = styled.section`\n  margin: auto;\n  padding: 26px;\n  height: 100%;\n  background-color: bisque;\n`;\n\nexport const Head = styled.h1`\n  background: #43d1af;\n  padding: 20px 0;\n  font-size: 140%;\n  font-weight: 300;\n  text-align: center;\n  color: #fff;\n  font-weight: 600;\n`;\n","import PropTypes from 'prop-types';\nimport { SectionSet, Head } from './Section.styled';\n\nexport default function Section({ title, children }) {\n  return (\n    <SectionSet>\n      {title && <Head>{title}</Head>}\n      {children}\n    </SectionSet>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n","import styled from '@emotion/styled';\n\nexport const FeedbackPointsSet = styled.div`\n  display: flex;\n`;\n\nexport const TotalPoints = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  align-content: center;\n  justify-content: space-between;\n\n  margin: 0;\n  height: 50px;\n  width: 180px;\n`;\n\nexport const FeedbackPoints = styled.p`\n  display: flex;\n  flex-direction: column;\n\n  align-content: center;\n  justify-content: space-between;\n  margin: 0;\n\n  height: 50px;\n  width: 180px;\n`;\n\nexport const PositivePotion = styled.p`\n  display: flex;\n  flex-direction: column;\n\n  align-content: center;\n  justify-content: space-between;\n  margin: 0;\n\n  height: 50px;\n  width: 180px;\n`;\n","import PropTypes from 'prop-types';\nimport {\n  FeedbackPointsSet,\n  TotalPoints,\n  FeedbackPoints,\n  PositivePotion,\n} from './Statistics.styled';\n\nexport default function Statistics({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) {\n  return (\n    <FeedbackPointsSet>\n      <FeedbackPoints>\n        Good : <span>{good}</span>\n      </FeedbackPoints>\n      <FeedbackPoints>\n        Neutral : <span>{neutral}</span>\n      </FeedbackPoints>\n      <FeedbackPoints>\n        Bad : <span>{bad}</span>\n      </FeedbackPoints>\n      <TotalPoints>\n        Total : <span>{total}</span>\n      </TotalPoints>\n      <PositivePotion>\n        Positive Feedback :\n        <span>{positivePercentage && positivePercentage} %</span>\n      </PositivePotion>\n    </FeedbackPointsSet>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const ButtonSet = styled.div`\n  padding: 20px 40px;\n  display: flex;\n  flex-direction: row;\n`;\n\nexport const Button = styled.button`\n  height: 50px;\n  width: 100px;\n\n  box-sizing: border-box;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  padding: 3%;\n  margin-left: auto;\n  margin-right: auto;\n  font-size: 16px;\n  font-weight: 600;\n  background: #188d8d;\n  color: #fff;\n  border-bottom: 2px solid #30c29e;\n  border-top-style: none;\n  border-right-style: none;\n  border-left-style: none;\n  &:hover {\n    background: #2ebc99;\n`;\n","import PropTypes from 'prop-types';\nimport { Button, ButtonSet } from './FeedbackOptions.styled';\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <ButtonSet>\n      {options.map(option => (\n        <Button key={option} type=\"button\" onClick={onLeaveFeedback}>\n          {option}\n        </Button>\n      ))}\n    </ButtonSet>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.node,\n  onLeaveFeedback: PropTypes.func,\n};\n","import styled from '@emotion/styled';\n\nexport const NotificationText = styled.p`\n  display: flex;\n  justify-content: center;\n  font-weight: 600;\n  font-size: 24px;\n  color: red;\n`;\n","import PropTypes from 'prop-types';\nimport { NotificationText } from './Notification.styled';\n\nexport default function Notification({ message }) {\n  return <NotificationText type=\"text\">{message}</NotificationText>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","import React from 'react';\nimport { Component } from 'react';\n\nimport Section from 'components/Section';\nimport Statistics from 'components/Statistics';\nimport FeedbackOptions from 'components/FeedbackOptions';\nimport Notification from 'components/Notification';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onButtonClick = e => {\n    let reaction = e.currentTarget.innerText.toLowerCase();\n    const keys = Object.keys(this.state);\n\n    if (keys.filter(key => key === reaction)) {\n      this.setState(prevState => ({ [reaction]: prevState[reaction] + 1 }));\n    }\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = total => {\n    const { good } = this.state;\n    return Number.parseInt((good * 100) / total);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const options = ['Good', 'Neutral', 'Bad'];\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage(total);\n\n    return (\n      <>\n        <Section title=\"Please )) Leave feedback\">\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={this.onButtonClick}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {total === 0 && <Notification message=\"There is no feedback ((\" />}\n          {total > 0 && (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'modern-normalize';\nimport './index.css';\nimport App from 'components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}