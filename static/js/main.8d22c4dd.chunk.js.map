{"version":3,"sources":["components/Section/Section.styled.js","components/Section/Section.jsx","components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.styled.js","components/FeedbackOptions/FeedbackOptions.jsx","components/App/App.jsx","index.js"],"names":["SectionSet","styled","section","Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","Button","button","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","console","log","Notification","App","state","onButtonClick","e","reaction","currentTarget","innerText","toLowerCase","Object","keys","filter","key","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Number","parseInt","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAEaA,EAAaC,IAAOC,QAAV,4F,OCCR,SAASC,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,eAACL,EAAD,WACGI,EACAC,KCLQ,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,gCACE,wCACS,+BAAOJ,OAEhB,2CACY,+BAAOC,OAEnB,uCACQ,+BAAOC,OAEf,yCACU,+BAAOC,OAEjB,oDAEE,iCAAOC,GAAsBA,EAA7B,aCvBD,IAAMC,EAASX,IAAOY,OAAV,yFCCJ,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACvB,cAACN,EAAD,CAAqBO,KAAK,SAASC,QAASJ,EAA5C,SACGE,GADUA,M,oBCGjBG,QAAQC,IAAIC,KACZF,QAAQC,IAAIR,G,IACSU,E,4MACnBC,MAAQ,CACNlB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPiB,cAAgB,SAAAC,GACd,IAAIC,EAAWD,EAAEE,cAAcC,UAAUC,cAC5BC,OAAOC,KAAK,EAAKR,OAErBS,QAAO,SAAAC,GAAG,OAAIA,IAAQP,MAC7B,EAAKQ,UAAS,SAAAC,GAAS,sBAAQT,EAAWS,EAAUT,GAAY,O,EAIpEU,mBAAqB,WACnB,MAA+B,EAAKb,MACpC,OADA,EAAQlB,KAAR,EAAcC,QAAd,EAAuBC,K,EAIzB8B,gCAAkC,SAAA7B,GAChC,IAAQH,EAAS,EAAKkB,MAAdlB,KACR,OAAOiC,OAAOC,SAAiB,IAAPlC,EAAcG,I,4CAGxC,WACE,MAA+BgC,KAAKjB,MAA5BlB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEjBC,EAAQgC,KAAKJ,qBACb3B,EAAqB+B,KAAKH,gCAAgC7B,GAEhE,OACE,qCACE,cAACP,EAAD,CAASC,MAAM,0BAAf,SACE,cAACU,EAAD,CACEC,QARQ,CAAC,OAAQ,UAAW,OAS5BC,gBAAiB0B,KAAKhB,kBAIzBhB,EAAQ,GACP,cAACP,EAAD,CAASC,MAAM,aAAf,SACE,cAACE,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,a,GAhDDgC,aCHjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.8d22c4dd.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const SectionSet = styled.section`\n  margin: auto;\n  height: 200px;\n  background-color: bisque;\n`;\n","import PropTypes from 'prop-types';\nimport { SectionSet } from './Section.styled';\n\nexport default function Section({ title, children }) {\n  return (\n    <SectionSet>\n      {title}\n      {children}\n    </SectionSet>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n","// import PropTypes from 'prop-types';\n\nexport default function Statistics({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) {\n  return (\n    <div>\n      <p>\n        Good : <span>{good}</span>\n      </p>\n      <p>\n        Neutral : <span>{neutral}</span>\n      </p>\n      <p>\n        Bad : <span>{bad}</span>\n      </p>\n      <p>\n        Total : <span>{total}</span>\n      </p>\n      <p>\n        Positive Feedback :\n        <span>{positivePercentage && positivePercentage}%</span>\n      </p>\n    </div>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  height: 50px;\n  width: 100px;\n  border: 1 px solid red;\n`;\n","// import PropTypes from 'prop-types';\nimport { Button } from './FeedbackOptions.styled';\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  return options.map(option => (\n    <Button key={option} type=\"button\" onClick={onLeaveFeedback}>\n      {option}\n    </Button>\n  ));\n}\n","import React from 'react';\nimport { Component } from 'react';\n\nimport Section from 'components/Section';\nimport Statistics from 'components/Statistics';\nimport FeedbackOptions from 'components/FeedbackOptions';\nimport Notification from 'components/Notification';\n\nconsole.log(Notification);\nconsole.log(FeedbackOptions);\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onButtonClick = e => {\n    let reaction = e.currentTarget.innerText.toLowerCase();\n    const keys = Object.keys(this.state);\n\n    if (keys.filter(key => key === reaction)) {\n      this.setState(prevState => ({ [reaction]: prevState[reaction] + 1 }));\n    }\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = total => {\n    const { good } = this.state;\n    return Number.parseInt((good * 100) / total);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const options = ['Good', 'Neutral', 'Bad'];\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage(total);\n\n    return (\n      <>\n        <Section title=\"Please)) Leave feedback\">\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={this.onButtonClick}\n          />\n        </Section>\n        {/* {!total && <Notification message=\"There is no feedback\" />} */}\n        {total > 0 && (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          </Section>\n        )}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'modern-normalize';\nimport './index.css';\nimport App from 'components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}